(begin-tx "create initial quest")
(namespace 'CLAIM_NS)
(use reward-claim)

(env-chain-data { 'block-time: (time "2025-04-20T00:00:00Z")})
(env-data {
    'qId: "1080",
    'amount: 0.1,
    'startDate: (time "2025-04-20T00:00:00Z"),
    'endDate: (time "2025-05-20T00:00:00Z"),
    'winners: 3
})

; Create a quest cap test

(expect-failure "OPS key not in scope" "Keyset failure" (create-quest (read-msg 'qId)  0.1 (read-msg 'startDate) (read-msg 'endDate) 3))

;; Create a quest, first we need to satisfy the keyset requirement for OPS
;; We want to try covering every possible failure case to test enforce logic
(env-sigs [{
    'key: "ops", 'caps: [(OPS)]},
    {'key: "dave-key", 'caps: [(coin.TRANSFER "dave" CLAIM-ACCOUNT 0.1)]
}])
(coin.transfer "dave" CLAIM-ACCOUNT 0.1)
(expect-failure "quest can't be blank" "String cannot be empty" (create-quest ""  0.1 (read-msg 'startDate) (read-msg 'endDate) 3))

(expect-failure "Price can't be 0.0" "Amount must be greater than 0.0" (create-quest (read-msg 'qId)  0.0 (read-msg 'startDate) (read-msg 'endDate) 3))

(expect-failure "Winners must be over 0" "Winners must be greater than 0" (create-quest (read-msg 'qId)  0.1 (read-msg 'startDate) (read-msg 'endDate) -1))

(expect-failure "End date set before start date" "End date must be greater than start date" (create-quest (read-msg 'qId)  0.1 (read-msg 'endDate) (read-msg 'startDate) 3))

(expect-failure "start date must be greater than current time" "Start date must be greater than or equal to current time" (create-quest (read-msg 'qId)  0.1 (time "2024-04-20T00:00:00Z") (read-msg 'endDate) 3))

(expect "Quest Created" "Quest 1080 created" (create-quest (read-msg 'qId)  (read-decimal 'amount) (read-msg 'startDate) (read-msg 'endDate) (read-msg 'winners)))

(expect-failure "Duplicate Quest ID" "Value already found" (create-quest (read-msg 'qId)  (read-decimal 'amount) (read-msg 'startDate) (read-msg 'endDate) (read-msg 'winners)))

(expect "amount 0.1" 0.1 (at 'amount (get-quest (read-msg 'qId))))
(env-sigs [])
(commit-tx)

(begin-tx "Second reward with admin withdrawal")
(namespace 'CLAIM_NS)
(use reward-claim)
(env-data {
    'qId: "1001",
    'amount: 10.0,
    'startDate: (time "2025-04-20T00:00:00Z"),
    'endDate: (time "2025-05-20T00:00:00Z"),
    'winners: 3
})
(env-sigs [{
    'key: "ops", 'caps: [(OPS)]},
    {'key: "dave-key", 'caps: [(coin.TRANSFER "dave" CLAIM-ACCOUNT 10.0)]
}])

(coin.transfer "dave" CLAIM-ACCOUNT 10.0)
(expect "Quest Created" "Quest 1001 created" (create-quest (read-msg 'qId)  (read-decimal 'amount) (read-msg 'startDate) (read-msg 'endDate) (read-msg 'winners)))

(env-sigs [])
(expect-failure "OPS Key not in scope" "Keyset failure" (admin-withdrawal (read-msg 'qId) "dave"))

(env-sigs [{
    'key: "ops", 'caps: [(OPS)]
}])

(expect "Correct balance after admin claim" 10.1 (coin.get-balance CLAIM-ACCOUNT))
(admin-withdrawal (read-msg 'qId) "dave")
(expect "Correct balance after admin claim" 0.1 (coin.get-balance CLAIM-ACCOUNT))

(commit-tx)